////
/// @group responsive
/// @author Thomas ZILLIOX

/// Get breakpoint length by component state
///
/// @param {String} $component-state - The state of a component ('component-name:component-size')
/// @param {Boolean} $next (false) - Set if you target the next component state
///
/// @access private

@function Herow-get-breakpoint-length-by-component-state($component-state, $next: false) {
    $is-next: false;
    $state-size: Herow-get-column-count-by-component-state($component-state);
    $component: Herow-get-component-by-component-state($component-state);
    @each $breakpoint, $size in map_get($component, column-count) {
        @if $is-next {
            @return $breakpoint;
        }
        @if ($size == $state-size) {
            @if ($next) {
                $is-next: true;
            } @else {
                @return $breakpoint;
            }
        }
    }
    @if ($is-next) {
        @return 0;
    }
    @warn "The component state '#{$component-state}' is undefined";
    @return 0;
}

/// Get breakpoint couple by component state
///
/// @param {List<String>} $component-state-list - A list of component state ('component-name:component-size')
///
/// @access private

@function Herow-get-breakpoint-list-by-component-state-list($component-state-list) {
    $breakpoint-list: ();
    $breakpoint-couple: ();
    $is-next: false;
    $size-list: Herow-get-column-count-list-by-component-state-list($component-state-list);
    $component: Herow-get-component-by-component-state(nth($component-state-list, 1));
    @each $breakpoint, $size in map_get($component, column-count) {
        @if (index($size-list, $size)) {
            @if (not $is-next) {
                $breakpoint-couple: append($breakpoint-couple, $breakpoint);
                $is-next: true;
            }
        } @else if ($is-next) {
            $breakpoint-couple: append($breakpoint-couple, $breakpoint);
            $breakpoint-list: append($breakpoint-list, $breakpoint-couple);
            $breakpoint-couple: ();
            $is-next: false;
        }
    }
    @if (length($breakpoint-couple) > 0) {
        $breakpoint-couple: append($breakpoint-couple, 0);
        $breakpoint-list: append($breakpoint-list, $breakpoint-couple);
    }
    @return $breakpoint-list;
}

/// Get media-query by breakpoint
///
/// @param {Length} $breakpoint
/// @param {Boolean} $is-max-width (false) - Set if you target the next component state
///
/// @access private

@function Herow-get-media-query-by-breakpoint($breakpoint, $is-max-width: false) {
    @if ($breakpoint == 0) {
        @return '';
    }
    $breakpoint: Herow-px2em($breakpoint);
    @if ($is-max-width) {
        $breakpoint: $breakpoint - 0.01em;
        @return '(max-width: #{$breakpoint})';
    }
    @return '(min-width: #{$breakpoint})';
}

/// Get media query by breakpoint couple
///
/// @param {List<Length>} $breakpoint-couple
///
/// @access private

@function Herow-get-media-query-by-breakpoint-couple($breakpoint-couple) {
    $media-query: '';
    $min-width: Herow-get-media-query-by-breakpoint(nth($breakpoint-couple, 1));
    @if $min-width != '' {
        $media-query: $min-width;
    }
    $max-width: Herow-get-media-query-by-breakpoint(nth($breakpoint-couple, 2), true);
    @if $max-width != '' {
        @if ($media-query != '') {
            $media-query: '#{$media-query} and ';
        }
        $media-query: '#{$media-query}#{$max-width}';
    }
    $media-query: unquote(#{$media-query});
    @return $media-query;
}

/// Get media-query by component state list
///
/// @param {List<List>} breakpoint-list
///
/// @access private

@function Herow-get-media-query-by-breakpoint-list($breakpoint-list) {
    $media-query: '';
    @if length($breakpoint-list) {
        @for $i from 1 through length($breakpoint-list) {
            $breakpoint-couple: nth($breakpoint-list, $i);
            @if ($media-query != '') {
                $media-query: '#{$media-query}, ';
            }
            $media-query-item: Herow-get-media-query-by-breakpoint-couple($breakpoint-couple);
            $media-query: '#{$media-query}#{$media-query-item}'
        }
    }
    $media-query: unquote(#{$media-query});
    @return $media-query;
}

/// Create a media-query by component state list
///
/// @param {List<String>} $component-state-list - A list of component state ('component-name:component-size')

@mixin Herow-on($component-state-list) {
    $breakpoint-list: Herow-get-breakpoint-list-by-component-state-list($component-state-list);
    @if ($Herow-debug) {
        -herow-breakpoint-list: $breakpoint-list;
    }
    $media-query: Herow-get-media-query-by-breakpoint-list($breakpoint-list);
    @if ($media-query != '') {
        @media #{$media-query} {
            @content;
        }
    } @else {
        @content;
    }
}
